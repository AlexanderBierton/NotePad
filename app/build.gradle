/*
 * Copyright (c) 2014 Jonas Kalderstam.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.13.0'
        // the latest version of the android-apt plugin for annotations
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.2'
    }
}

apply plugin: 'com.android.application'

// For annotations
apply plugin: 'android-apt'
def AAVersion = '3.0.1'

repositories {
    mavenCentral()
    mavenLocal()
}

configurations {
    apt
}

// Version number
def versionMajor = 5 // Major UI overhauls
def versionMinor = 4 // Some new functionality
def versionPatch = 1 // Bug fixes
def versionBuild = 0 // Bump for dogfood builds, public betas, etc.

// Version name from git
def getVersionName = { ->
  try {
  def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
  } catch (Exception e) {
    return "GITFAILEDINGRADLE"
  }
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    lintOptions {
        abortOnError false
    }

    defaultConfig {
      applicationId "com.nononsenseapps.notepad"
      minSdkVersion 14
      targetSdkVersion 19
      versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild * 10
      //versionName "${versionMajor}.${versionMinor}.${versionPatch}"
      versionName getVersionName()

        // If Non-Free libraries are to be used
        buildConfigField "boolean", "NONFREE", "false"
        buildConfigField "boolean", "DROPBOX_ENABLED", "false"
    }

    productFlavors {
        free {}
      play {
          // If Non-Free libraries are to be used
          buildConfigField "boolean", "NONFREE", "true"
      }
      playBeta {
        // Beta runs at +1
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild * 10 + 1

        buildConfigField "boolean", "DROPBOX_ENABLED", "true"
        // If Non-Free libraries are to be used
        buildConfigField "boolean", "NONFREE", "true"
      }
    }

    sourceSets {
        playBeta {
            // Include play sources
            java.srcDirs = ['src/play/java']
            res.srcDirs = ['src/play/res', 'src/playBeta/res']
            manifest.srcFile 'src/play/AndroidManifest.xml'
        }
    }

    if (project.hasProperty('STORE_FILE')) {
      signingConfigs {
        release {
          storeFile file(STORE_FILE)
          storePassword STORE_PASSWORD
          keyAlias KEY_ALIAS
          keyPassword KEY_PASSWORD
        }
      }

      buildTypes {
        release {
          signingConfig signingConfigs.release
        }
      }
    } else {
      println "No key store defined. Signed release not available..."
    }
}

// annotations
apt {
    arguments {
        resourcePackageName android.defaultConfig.applicationId
        androidManifestFile variant.processResources.manifestFile
        // If you're using Android NBS flavors you should use the
        //following line instead of hard-coded packageName
        //resourcePackageName android.defaultConfig.packageName
        //resourcePackageName 'com.nononsenseapps'

        // You can set optional annotation processing options here,
        // like these commented options:
        // logLevel 'INFO'
        // logFile '/var/log/aa.log'
    }
}

// Dropbox
task nativeLibsToJar(type: Zip) {
    destinationDir file("$buildDir/native-libs")
    baseName 'native-libs'
    extension 'jar'
    from fileTree(dir: 'src/playBeta/libs', include: '**/*.so')
    into 'lib/'
}

// If non-free, depend on dropbox
tasks.withType(JavaCompile) {
    compileTask -> if (compileTask.toString().contains("Play")) compileTask.dependsOn(nativeLibsToJar)
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.android.support:support-v4:19.0.1+'
    compile 'joda-time:joda-time:2.3'
    // FilePicker
    compile 'com.nononsenseapps:filepicker:1.1.3+'
    compile project(':external:ActionBar-PullToRefresh')
    compile project(':external:datetimepicker')
    compile project(':external:drag-sort-listview')
    compile project(':external:ShowcaseView')
    // annotations
    apt "org.androidannotations:androidannotations:$AAVersion"
    compile "org.androidannotations:androidannotations-api:$AAVersion"
    // Dropbox and non-free stuff
    playCompile fileTree(dir: 'src/play/libs', include: '*.jar')
    playBetaCompile fileTree(dir: 'src/play/libs', include: '*.jar')
    playCompile fileTree(dir: "$buildDir/native-libs", include: "*.jar")
    playCompile 'com.google.android.gms:play-services:+'
    playBetaCompile fileTree(dir: "$buildDir/native-libs", include: "*.jar")
    playBetaCompile 'com.google.android.gms:play-services:+'
    // Tests
    androidTestCompile 'com.squareup.spoon:spoon-client:1.1.1+'

}